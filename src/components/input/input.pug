//-
  Все параметры опциональны (разве что label и type желательно задать для семантики):
  options.class - класс, который хотим примиксовать к обертке .input (не рекомендуется) 
  options.inputClass - класс, который хотим примиксовать к инпуту (не рекомендуется)
  options.inputId - id для инпута
  options.label - подпись
  options.sublabel - второстепенная подпись (опционально)
  options.placeholder - плейсхолдер
  options.type - тип ("text", "checkbox", "radio", "toggle" и пр.; если задан тип "date" инициализируется плагин Cleave.js, а тип инпута устанавливается "text")
  options.value - значение по умолчанию
  options.name - уникальное имя
  options.checked - состояние переключателя (true/false, по умолчанию false, актуально для checkbox, radio, toggle)
  options.tadindex - порядок получения фокуса при переходе между элементами с помощью клавиши Tab
  options.required - является ли поле обязательным для заполнения
  options.attributes - любые атрибуты, которые хотим передать инпуту
  options.pattern - регулярное выражение, согласно которому требуется вводить и проверять данные в поле
  options.readonly - может ли текстовое поле изменяться пользователем (true/false, по умолчанию true)
  options.view - декоративная опция (пока доступно 1 значение - "arrow_down")
  options.cursor - вид курсора (пока доступно 1 значение - "pointer")
  
mixin input(options = {})
  - let blockClass = options.class || ""

  if options.type
    - blockClass += blockClass ? ` input_${options.type}` : `input_${options.type}`

  if options.view
    - blockClass += blockClass ? ` input_${options.view}` : `input_${options.view}`

  .input.js-input(class = blockClass)
  
    //- передаем через переменную чтобы можно было обеспечить вставку тегов внутри label (в частности тег br)
    - let label = options.label

    if (options.sublabel)
      - label = "<span class='input__main-label'>" + options.label + "</span><br>" + "<span class='input__sublabel'>" + options.sublabel + "</span>"

    //- передаем через переменную чтобы можно было ниже при необходимости добавить еще классы
    - let inputClass = options.inputClass || ""        

    - let type = options.type

    if options.type == "toggle"
      - type = "checkbox"

    if options.type == "date"
      - type = "text"
      - inputClass += inputClass ? ` js-input_date` : 'js-input_date' 
        
    if options.cursor
      - inputClass += inputClass ? ` input__input_cursor_${options.cursor}` : `input__input_cursor_${options.cursor}`          
    
    case options.type
      when "checkbox"
      when "radio"
      when "toggle"
        input.input__input(
          class = inputClass
          id = options.inputId
          type = type
          name = options.name
          tadindex = options.tabindex
          required = options.required
          value = options.value
          checked = options.checked
        )&attributes(options.attributes)
        label.input__label(
          for = options.inputId
        ) !{label}
      default
        label.input__label !{label}
          input.input__input.js-input__input(
            class = inputClass
            id = options.inputId
            type = type
            name = options.name
            placeholder = options.placeholder
            pattern = options.pattern
            tadindex = options.tabindex
            required = options.required
            value = options.value
            readonly = options.readonly
          )&attributes(options.attributes)