
mixin input(options = {})
  -
    let {
      inputId = undefined,
      label = undefined,
      sublabel = undefined,
      placeholder = undefined,
      type = "text",
      value = undefined,
      name = undefined,
      checked = false,
      tabIndex = undefined,
      required = false,
      attributesObject = {},
      pattern = undefined,
      readonly = false,
      views = undefined,
      button = false
    } = options

  - let blockClass = ""
  - let inputClass = ""

  if (type)
    - blockClass = `input_${type}`

  if (button)
    - blockClass += blockClass ? " input_with-button" : "input_with-button"  

  if (views)
    - const viewsForBlockClass = ["arrow_down"]
    - const viewsForInputClass = ["dropdown_open", "focused", "clickable"]
    each view in views
      if (viewsForBlockClass.includes(view))
        - blockClass += blockClass ? ` input_${view}` : `input_${view}`
      if (viewsForInputClass.includes(view))
        - inputClass += inputClass ? ` input__field_${view}` : `input__field_${view}`

  - let tag = button ? "form" : "div"
  - let blockAttributes = button ? {method: "post"} : "";

  #{tag}.input.js-input(class = blockClass)&attributes(blockAttributes)
  
    //- передаем через переменную чтобы можно было обеспечить вставку тегов внутри label (в частности тег br)
    //- - let label = options.label

    if (sublabel)
      - label = "<span class='input__main-label'>" + label + "</span><br>" + "<span class='input__sublabel'>" + sublabel + "</span>"       

    - let inputType = type

    if (type == "toggle")
      - inputType = "checkbox"

    if (type == "date")
      - inputType = "text"
      - inputClass += inputClass ? ` js-input__field_date` : 'js-input__field_date'          
    
    case type
      when "checkbox"
      when "radio"
      when "toggle"
        input.input__field(
          class = inputClass
          id = inputId
          type = inputType
          name = name
          tabIndex = tabindex
          required = required
          value = value
          checked = checked
        )&attributes(attributesObject)
        label.input__label(
          for = inputId
        ) !{label}
      default
        label.input__label !{label}
          input.input__field.js-input__field(
            class = inputClass
            id = inputId
            type = InputType
            name = name
            placeholder = placeholder
            pattern = pattern
            tabIndex = tabindex
            required = required
            value = value
            readonly = readonly
          )&attributes(attributesObject)
        if (button)
          button.input__submit-button(type = "submit")