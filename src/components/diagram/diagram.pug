mixin diagram(options = {})
  -
    const {
      great = 0,
      good = 0,
      alright = 0,
      bad = 0
    } = options

  - const badVotes = bad
  - const alrightVotes = alright
  - const goodVotes = good
  - const greatVotes = great
  
  - const sumVotes = greatVotes + goodVotes + alrightVotes + badVotes
  
  - const badPercent = badVotes * 100 / sumVotes
  - const alrightPercent = alrightVotes * 100 / sumVotes
  - const goodPercent = goodVotes * 100 / sumVotes
  - const greatPercent = greatVotes * 100 / sumVotes
  
  - const badLength = badPercent ? (badPercent == 100 ? badPercent : badPercent - 0.5) : 0
  - const alrightLength = alrightPercent ? (alrightPercent == 100 ? alrightPercent : alrightPercent - 0.5) : 0
  - const goodLength = goodPercent ? (goodPercent == 100 ? goodPercent : goodPercent - 0.5) : 0
  - const greatLength = greatPercent ? (greatPercent == 100 ? greatPercent : greatPercent - 0.5) : 0
    
  - const badDashoffset = -75.5
  - let alrightDashoffset = badDashoffset - badPercent
  - let goodDashoffset = alrightDashoffset - alrightPercent
  - let greatDashoffset = goodDashoffset - goodPercent
  
  - alrightDashoffset = alrightDashoffset < -100 ? alrightDashoffset + 100 : alrightDashoffset
  - goodDashoffset = goodDashoffset < -100 ? goodDashoffset + 100 : goodDashoffset
  - greatDashoffset = greatDashoffset < -100 ? greatDashoffset + 100 : greatDashoffset
  
  - function getPointsForGradient(dashoffset, segmentLength)
    - let point1 = Math.round( sinToPercent(dashoffset) )
    - let point2 = Math.round( sinToPercent(dashoffset - segmentLength) )
    - if (point1 > point2) 
      - [point1, point2] = [point2, point1]
    - if ( isSegmentGoesThroughBottom(point1, point2, segmentLength) ) 
      - point2 = 100
    - return { point1: point1, point2: point2 }
    
  - function sinToPercent(num)
   - return 50 - 50 * getSin(num)  
      
  - function getSin(offset)
   - return Math.sin(2 * Math.PI / 100 * offset)
      
  - function isSegmentGoesThroughBottom(point1, point2, segmentLength)
    - if ( (point1 - point2) < segmentLength )
      - return true
    - else
      - return false

  figure.diagram
    .diagram__chart
      svg.diagram__circle(width="100" height="100" viewBox="0 0 33.8 33.8")
      
        //- There should be no more than 1 diagram on the page, otherwise the gradients break 
        //- (due to the fact that there are several identical id on the page 
        //- and the gradients of the first diagram, 
        //- where the offset attributes are calculated for its values, are applied to all).
        //- Nothing will break, but it will not be so beautiful.
        defs
          linearGradient#bad(x1="0" x2="0" y1="0" y2="1")
            stop(
              stop-color="#919191" 
              offset= getPointsForGradient(badDashoffset, badLength).point1 + "%"
            )
            stop(
              stop-color="#3D4975" 
              offset= getPointsForGradient(badDashoffset, badLength).point2 + "%"
            )
          linearGradient#alright(x1="0" x2="0" y1="0" y2="1")
            stop(
              stop-color="#BC9CFF" 
              offset= getPointsForGradient(alrightDashoffset, alrightLength).point1 + "%"
            )
            stop(
              stop-color="#8BA4F9" 
              offset= getPointsForGradient(alrightDashoffset, alrightLength).point2 + "%"
            ) 
          linearGradient#good(x1="0" x2="0" y1="0" y2="1")
            stop(
              stop-color="#6FCF97"
              offset= getPointsForGradient(goodDashoffset, goodLength).point1 + "%"
            )
            stop(
              stop-color="#66D2EA" 
              offset= getPointsForGradient(goodDashoffset, goodLength).point2 + "%"
            ) 
          linearGradient#great(x1="0" x2="0" y1="0" y2="1")
            stop(
              stop-color="#FFE39C"
              offset= getPointsForGradient(greatDashoffset, greatLength).point1 + "%"
            )
            stop(
              stop-color="#FFBA9C" 
              offset= offset= getPointsForGradient(greatDashoffset, greatLength).point2 + "%"
            )
        
        circle.diagram__segment.diagram__segment_vote_bad(
          r="15.9" cx="50%" cy="50%" 
          stroke="url(#bad)"
          stroke-dasharray= badLength + " " + (100 - badLength) 
          stroke-dashoffset= badDashoffset
        )
        circle.diagram__segment.diagram__segment_vote_alright(
          r="15.9" cx="50%" cy="50%"
          stroke="url(#alright)"
          stroke-dasharray= alrightLength + " " + (100 - alrightLength)
          stroke-dashoffset= alrightDashoffset
        )
        circle.diagram__segment.diagram__segment_vote_good(
          r="15.9" cx="50%" cy="50%" 
          stroke="url(#good)"
          stroke-dasharray= goodLength + " " + (100 - goodLength)
          stroke-dashoffset= goodDashoffset
        )
        circle.diagram__segment.diagram__segment_vote_great(
          r="15.9" cx="50%" cy="50%" 
          stroke="url(#great)"
          stroke-dasharray= greatLength + " " + (100 - greatLength)
          stroke-dashoffset= greatDashoffset
        )
            
      span.diagram__votes.js-diagram__votes(
        data-word = 'голосов'
      ) #{sumVotes}
        
    figcaption.diagram__legend
      ul.diagram__legend-list
        li.diagram__legend-item.diagram__legend-item_vote_great Великолепно
        li.diagram__legend-item.diagram__legend-item_vote_good Хорошо
        li.diagram__legend-item.diagram__legend-item_vote_alright Удовлетворительно
        li.diagram__legend-item.diagram__legend-item_vote_bad Разочарован
      
