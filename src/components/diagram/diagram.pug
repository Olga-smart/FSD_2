//- На странице должно быть не больше 1 диaграммы, иначе градиенты ломаются (из-за того, что становится несколько одинаковых id на странице и применяются градиенты первой диаграммы ко всем, где атрибуты offset вычислены для первой диаграммы)

mixin diagram(options)
  - let badVotes = options.bad || 0
  - let alrightVotes = options.alright || 0
  - let goodVotes = options.good || 0
  - let greatVotes = options.great || 0
  
  - let sumVotes = greatVotes + goodVotes + alrightVotes + badVotes
  
  - let badPercent = badVotes * 100 / sumVotes
  - let alrightPercent = alrightVotes * 100 / sumVotes
  - let goodPercent = goodVotes * 100 / sumVotes
  - let greatPercent = greatVotes * 100 / sumVotes
  
  - let badPercentMinusIndent = badPercent ? badPercent - 0.5 : 0
  - let alrightPercentMinusIndent = alrightPercent ? alrightPercent - 0.5 : 0
  - let goodPercentMinusIndent = goodPercent ? goodPercent - 0.5 : 0
  - let greatPercentMinusIndent = greatPercent ? greatPercent - 0.5 : 0
    
  - let badDashoffset = -75.5
  - let alrightDashoffset = badDashoffset - badPercent
  - let goodDashoffset = alrightDashoffset - alrightPercent
  - let greatDashoffset = goodDashoffset - goodPercent
  
  - alrightDashoffset = alrightDashoffset < -100 ? alrightDashoffset + 100 : alrightDashoffset
  - goodDashoffset = goodDashoffset < -100 ? goodDashoffset + 100 : goodDashoffset
  - greatDashoffset = greatDashoffset < -100 ? greatDashoffset + 100 : greatDashoffset
  
  - function getPointsForGradient(dashoffset, segmentLength)
    - let point1 = Math.round( sinToPercent(dashoffset) )
    - let point2 = Math.round( sinToPercent(dashoffset - segmentLength) )
    - if (point1 > point2) 
      - [point1, point2] = [point2, point1]
    - if ( isSegmentGoesThroughBottom(point1, point2, segmentLength) ) 
      - point2 = 100
    - return { point1: point1, point2: point2 }
    
  - function sinToPercent(num)
   - return 50 - 50 * getSin(num)  
      
  - function getSin(offset)
   - return Math.sin(2 * Math.PI / 100 * offset)
      
  - function isSegmentGoesThroughBottom(point1, point2, segmentLength)
    - if ( (point1 - point2) < segmentLength )
      - return true
    - else
      - return false

  figure.diagram
    .diagram__chart
      svg.diagram__svg(width="100" height="100" viewBox="0 0 33.8 33.8")
      
        defs
          linearGradient#bad(x1="0" x2="0" y1="0" y2="1")
            stop(
              stop-color="#919191" 
              offset= getPointsForGradient(badDashoffset, badPercentMinusIndent).point1 + "%"
            )
            stop(
              stop-color="#3D4975" 
              offset= getPointsForGradient(badDashoffset, badPercentMinusIndent).point2 + "%"
            )
          linearGradient#alright(x1="0" x2="0" y1="0" y2="1")
            stop(
              stop-color="#BC9CFF" 
              offset= getPointsForGradient(alrightDashoffset, alrightPercentMinusIndent).point1 + "%"
            )
            stop(
              stop-color="#8BA4F9" 
              offset= getPointsForGradient(alrightDashoffset, alrightPercentMinusIndent).point2 + "%"
            ) 
          linearGradient#good(x1="0" x2="0" y1="0" y2="1")
            stop(
              stop-color="#6FCF97"
              offset= getPointsForGradient(goodDashoffset, goodPercentMinusIndent).point1 + "%"
            )
            stop(
              stop-color="#66D2EA" 
              offset= getPointsForGradient(goodDashoffset, goodPercentMinusIndent).point2 + "%"
            ) 
          linearGradient#great(x1="0" x2="0" y1="0" y2="1")
            stop(
              stop-color="#FFE39C"
              offset= getPointsForGradient(greatDashoffset, greatPercentMinusIndent).point1 + "%"
            )
            stop(
              stop-color="#FFBA9C" 
              offset= offset= getPointsForGradient(greatDashoffset, greatPercentMinusIndent).point2 + "%"
            )
        
        circle.diagram__segment.diagram__segment_bad(
          r="15.9" cx="50%" cy="50%" 
          stroke="url(#bad)"
          stroke-dasharray= badPercentMinusIndent + " " + (100 - badPercentMinusIndent) 
          stroke-dashoffset= badDashoffset
        )
        circle.diagram__segment.diagram__segment_alright(
          r="15.9" cx="50%" cy="50%"
          stroke="url(#alright)"
          stroke-dasharray= alrightPercentMinusIndent + " " + (100 - alrightPercentMinusIndent)
          stroke-dashoffset= alrightDashoffset
        )
        circle.diagram__segment.diagram__segment_good(
          r="15.9" cx="50%" cy="50%" 
          stroke="url(#good)"
          stroke-dasharray= goodPercentMinusIndent + " " + (100 - goodPercentMinusIndent)
          stroke-dashoffset= goodDashoffset
        )
        circle.diagram__segment.diagram__segment_great(
          r="15.9" cx="50%" cy="50%" 
          stroke="url(#great)"
          stroke-dasharray= greatPercentMinusIndent + " " + (100 - greatPercentMinusIndent)
          stroke-dashoffset= greatDashoffset
        )
        
            
      .diagram__votes
        span.diagram__votes-number.js-diagram__votes-number #{sumVotes}
        span.diagram__votes-word.js-diagram__votes-word голосов
        
    figcaption.diagram__legend
      ul.diagram__legend-list
        li.diagram__legend-item.diagram__legend-item_great Великолепно
        li.diagram__legend-item.diagram__legend-item_good Хорошо
        li.diagram__legend-item.diagram__legend-item_alright Удовлетворительно
        li.diagram__legend-item.diagram__legend-item_bad Разочарован
      
